FORMAT: 1A
HOST: https://chat.service.tokenbrowser.com

# Token Chat Service

Chat allows for the sending of messages, encrypted with Signal protocol, between individuals. This can be messages relayed between users, or between an app and a user.
Messages are sent via the Signal service.

# Group Accounts

## Account Creation [/v1/accounts/]

### Create Account [PUT]
Creates an account from account attributes, and when combined with the signature, ethereum address via ECDSA key recovery.

A guide to generating the Token-* headers can be found [here](https://www.tokenbrowser.com/docs/token-services-lib/#header-generating-signatures)

+ Headers
        Authorization: 
        X-Signal-Agent: 
        Token-Timestamp: 
        Token-Signature: 
        Token-ID-Address: 

+ Request (application/json)

        {
          "signalingKey": "...",
          "fetchesMessages": true,
          "registrationId": 1049,
          "name": null,
          "voice": false
        }


## Bootstrapped Account Creation [/v1/accounts/bootstrap/]

### Create Account from bootstrap payload  [PUT]

Creates an account and provisions it with prekeys.

+ Request (application/json)

        {
            "identityKey": "BY10yMjz6aXkFkgimjLbBoP\/NvyrppofUmTrMqhuGPAR",
            "lastResortKey": {
              "keyId": uniqueInteger,
              "publicKey": "publicKeyOfLastResortKey"
            },
            "password": "password",
            "preKeys": [
              {
                "keyId": uniqueInteger,
                "publicKey": "publicKeyOfThisPreKey"
              },
              (...)
            ],
            "registrationId": integer,
            "signalingKey": "Random52ByteString",
            "signedPreKey": {
              "keyId": uniqueId,
              "publicKey": "signedPreKeyPublicKey",
              "signature": "signedPreKeySignature"
            }
        }

+ Response 204 (application/json)


### Get server timestamp for bootstrap request  [GET]
Use this value to predict the correct timestamp to use when sending a `PUT /v1/accounts/bootstrap/` request,
to avoid erroneous rejection due to clock desync between client and server.
+ Response 200 (application/json)
{
 "timestamp": 1481792827
}



## Account Attributes [/v1/accounts/attributes]
### Set attributes on account [PUT]
+ Request (application/json)

    + Headers

            Authorization: 
            X-Signal-Agent: 

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "signalingKey": {
                  "type": "string"
                },
                "fetchesMessages": {
                  "type": "boolean",
                  "default": false
                },
                "registrationId": {
                  "type": "integer",
                  "format": "int32"
                },
                "name": {
                  "type": "string"
                },
                "voice": {
                  "type": "boolean",
                  "default": false
                }
              }
            }


# Group Messaging

## Message [/v1/messages/{destination}]
+ Parameters
    + destination (string) - Ethereum address of message recipient
### Send message [PUT]
+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: 

    + Body

            {
              "messages": [
                {
                  "timestamp": 17884000,
                  "destinationRegistrationId": 39167258,
                  "content": "irure aliquip minim sed",
                  "body": "aliquip ea",
                  "destinationDeviceId": -14766533,
                  "relay": "est",
                  "destination": "dolore ut dolor sunt",
                  "type": -15267097
                },
                {
                  "content": "laborum",
                  "timestamp": -35314861,
                  "relay": "Lorem amet",
                  "destinationRegistrationId": 68353787,
                  "destinationDeviceId": 75332158,
                  "destination": "ut dolore"
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "messages"
              ],
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "destination": {
                        "type": "string"
                      },
                      "destinationDeviceId": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "destinationRegistrationId": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "body": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "relay": {
                        "type": "string"
                      },
                      "timestamp": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  }
                },
                "relay": {
                  "type": "string"
                },
                "timestamp": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }

+ Response 200 (application/json)

    successful operation

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "needsSync": {
                  "type": "boolean",
                  "default": false
                }
              }
            }

## Pending Messages Collection [/v1/messages]
### Get pending messages [GET]
+ Request

    + Headers

            Accept: application/json
            Authorization: 

    + Body

+ Response 200 (application/json)

    successful operation

    + Body

    + Schema

            {
              "type": "object",
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "relay": {
                        "type": "string"
                      },
                      "timestamp": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "source": {
                        "type": "string"
                      },
                      "sourceDevice": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "byte"
                        }
                      },
                      "content": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "byte"
                        }
                      }
                    }
                  }
                },
                "more": {
                  "type": "boolean",
                  "default": false
                }
              }
            }

## Pending Message [/v1/messages/{source}/{timestamp}]
+ Parameters
    + source (string) - Ethereum address of sender
    + timestamp (number) - timestamp of pending message
### Delete pending message [DELETE]

## Delivery Receipt [/v1/receipt/{destination}/{message_id}]
+ Parameters
    + destination (string) - Ethereum address of message recipient
    + message_id (number) - ID of message
### Send delivery receipt [PUT]

## Attachments Collection [/v1/attachments]
### Allocate attachment [GET]
+ Request

    + Headers

            Accept: application/json
            Authorization: 

    + Body

+ Response 200 (application/json)

    successful operation

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "location": {
                  "type": "string"
                }
              }
            }

## Attachment [/v1/attachments/{attachment_id}]
+ Parameters
    + attachment_id (number) - ID of attachment
### Redirect To Attachment [GET]
+ Parameters
    + attachmentId (required)
    + relay

+ Request
    + Headers
            Accept: application/json
            Authorization: 

    + Body

+ Response 200 (application/json)

    successful operation

    + Body

            {
              "location": "do in"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "location": {
                  "type": "string"
                }
              }
            }



# Group Push Notifications

## APN Push Service Registration [/v1/accounts/apn/]
Apple Push Notification Service
### Set APN registration id [PUT]

+ Request (application/json)
  + Headers
    Authorization:
  + Body
    {
    "apnRegistrationId": "in quis"
    }

  + Schema
    {
      "type": "object",
      "properties": {
        "apnRegistrationId": {
          "type": "string"
        },
        "voipRegistrationId": {
          "type": "string"
        }
      }
    }

### Delete APN registration id [DELETE]

## GCM Push Service Registration [/v1/accounts/gcm/]
Google Cloud Messaging
### Set GCM registration id [PUT]
+ Request (application/json)

    + Headers

            Authorization: 

    + Body

            {
              "webSocketChannel": false
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "gcmRegistrationId": {
                  "type": "string"
                },
                "webSocketChannel": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
### Delete GCM registration id [DELETE]


# Group Devices

## Devices Collection [/v1/devices/]
### Get list of devices [GET]

## Device [/v1/devices/{device_id}]
+ Parameters
    + device_id (number) - ID of the device
### Delete device from account [DELETE]




# Group Keys

## Keys Collection [/v2/keys]
### Get count of PreKeys [GET]
+ Request

    + Headers

            Accept: application/json
            Authorization: 

    + Body

+ Response 200 (application/json)

    successful operation

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
### Set keys [PUT]
+ Request (application/json)

    + Headers

            Authorization: 

    + Body

            {
              "lastResortKey": {
                "keyId": -28579668
              },
              "preKeys": [
                {
                  "keyId": -81338653
                },
                {
                  "keyId": -26773841
                },
                {
                  "keyId": -9396493
                },
                {
                  "keyId": 15463664,
                  "publicKey": "elit"
                },
                {
                  "keyId": -98227863
                }
              ],
              "signedPreKey": {
                "keyId": -77033897
              }
            }

    + Schema

            {
              "type": "object",
              "required": [
                "lastResortKey",
                "preKeys",
                "signedPreKey"
              ],
              "properties": {
                "preKeys": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "keyId"
                    ],
                    "properties": {
                      "keyId": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "publicKey": {
                        "type": "string"
                      }
                    }
                  }
                },
                "signedPreKey": {
                  "type": "object",
                  "required": [
                    "keyId"
                  ],
                  "properties": {
                    "keyId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "signature": {
                      "type": "string"
                    }
                  }
                },
                "lastResortKey": {
                  "type": "object",
                  "required": [
                    "keyId"
                  ],
                  "properties": {
                    "keyId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "publicKey": {
                      "type": "string"
                    }
                  }
                },
                "identityKey": {
                  "type": "string"
                }
              }
            }

## Signed Key [/v2/keys/signed]
### Get signed key [GET]
+ Request

    + Headers

            Accept: application/json
            Authorization: 

    + Body

+ Response 200 (application/json)

    successful operation

    + Body

            {
              "keyId": 52662686
            }

    + Schema

            {
              "type": "object",
              "required": [
                "keyId"
              ],
              "properties": {
                "keyId": {
                  "type": "integer",
                  "format": "int64"
                },
                "publicKey": {
                  "type": "string"
                },
                "signature": {
                  "type": "string"
                }
              }
            }

### Set signed key [PUT]
+ Request (application/json)

    + Headers

            Authorization: 

    + Body

            {
              "keyId": -4546692,
              "signature": "cupidatat"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "keyId"
              ],
              "properties": {
                "keyId": {
                  "type": "integer",
                  "format": "int64"
                },
                "publicKey": {
                  "type": "string"
                },
                "signature": {
                  "type": "string"
                }
              }
            }


## PreKeyBundle [/v2/keys/{eth_address}/{device_id}]
+ Parameters
    + eth_address (string) - Ethereum address of message recipient
    + device_id (number) - ID of device. Wildcard '*' can (and should) be used in place of targeting a specific device in most cases.
### Get bundle for any user [GET]
+ Request

    + Headers

            Accept: application/json
            Authorization: 

    + Body

+ Response 200 (application/json)

    successful operation

    + Body

            {}

    + Schema

            {
              "type": "object"
            }
